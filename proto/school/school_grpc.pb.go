// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             (unknown)
// source: school/school.proto

package school

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	Shool_ListLabos_FullMethodName = "/school.Shool/ListLabos"
)

// ShoolClient is the client API for Shool service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// School サービス
type ShoolClient interface {
	// 研究室の一覧を返す
	ListLabos(ctx context.Context, in *ListLabosRequest, opts ...grpc.CallOption) (*ListLabosResponse, error)
}

type shoolClient struct {
	cc grpc.ClientConnInterface
}

func NewShoolClient(cc grpc.ClientConnInterface) ShoolClient {
	return &shoolClient{cc}
}

func (c *shoolClient) ListLabos(ctx context.Context, in *ListLabosRequest, opts ...grpc.CallOption) (*ListLabosResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListLabosResponse)
	err := c.cc.Invoke(ctx, Shool_ListLabos_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ShoolServer is the server API for Shool service.
// All implementations should embed UnimplementedShoolServer
// for forward compatibility
//
// School サービス
type ShoolServer interface {
	// 研究室の一覧を返す
	ListLabos(context.Context, *ListLabosRequest) (*ListLabosResponse, error)
}

// UnimplementedShoolServer should be embedded to have forward compatible implementations.
type UnimplementedShoolServer struct {
}

func (UnimplementedShoolServer) ListLabos(context.Context, *ListLabosRequest) (*ListLabosResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListLabos not implemented")
}

// UnsafeShoolServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ShoolServer will
// result in compilation errors.
type UnsafeShoolServer interface {
	mustEmbedUnimplementedShoolServer()
}

func RegisterShoolServer(s grpc.ServiceRegistrar, srv ShoolServer) {
	s.RegisterService(&Shool_ServiceDesc, srv)
}

func _Shool_ListLabos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListLabosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ShoolServer).ListLabos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Shool_ListLabos_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ShoolServer).ListLabos(ctx, req.(*ListLabosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Shool_ServiceDesc is the grpc.ServiceDesc for Shool service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Shool_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "school.Shool",
	HandlerType: (*ShoolServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListLabos",
			Handler:    _Shool_ListLabos_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "school/school.proto",
}
