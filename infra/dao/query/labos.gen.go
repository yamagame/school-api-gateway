// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.
// Code generated by gorm.io/gen. DO NOT EDIT.

package query

import (
	"context"

	"gorm.io/gorm"
	"gorm.io/gorm/clause"
	"gorm.io/gorm/schema"

	"gorm.io/gen"
	"gorm.io/gen/field"

	"gorm.io/plugin/dbresolver"

	"github.com/yamagame/school-api-gateway/infra/model"
)

func newLabo(db *gorm.DB, opts ...gen.DOOption) labo {
	_labo := labo{}

	_labo.laboDo.UseDB(db, opts...)
	_labo.laboDo.UseModel(&model.Labo{})

	tableName := _labo.laboDo.TableName()
	_labo.ALL = field.NewAsterisk(tableName)
	_labo.ID = field.NewInt32(tableName, "id")
	_labo.Name = field.NewString(tableName, "name")
	_labo.GroupID = field.NewInt32(tableName, "group_id")
	_labo.ProgramID = field.NewInt32(tableName, "program_id")
	_labo.BuildingID = field.NewInt32(tableName, "building_id")
	_labo.CreatedAt = field.NewTime(tableName, "created_at")
	_labo.UpdatedAt = field.NewTime(tableName, "updated_at")
	_labo.Group = laboBelongsToGroup{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Group", "model.Group"),
	}

	_labo.Program = laboBelongsToProgram{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Program", "model.Program"),
	}

	_labo.Building = laboBelongsToBuilding{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Building", "model.Building"),
		Aliases: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Building.Aliases", "model.Alias"),
		},
	}

	_labo.Professors = laboManyToManyProfessors{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Professors", "model.Professor"),
		Person: struct {
			field.RelationField
			Role struct {
				field.RelationField
			}
			Address struct {
				field.RelationField
			}
			Licenses struct {
				field.RelationField
				Person struct {
					field.RelationField
				}
			}
		}{
			RelationField: field.NewRelation("Professors.Person", "model.Person"),
			Role: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Professors.Person.Role", "model.Role"),
			},
			Address: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Professors.Person.Address", "model.Address"),
			},
			Licenses: struct {
				field.RelationField
				Person struct {
					field.RelationField
				}
			}{
				RelationField: field.NewRelation("Professors.Person.Licenses", "model.License"),
				Person: struct {
					field.RelationField
				}{
					RelationField: field.NewRelation("Professors.Person.Licenses.Person", "model.Person"),
				},
			},
		},
		Room: struct {
			field.RelationField
			Building struct {
				field.RelationField
			}
		}{
			RelationField: field.NewRelation("Professors.Room", "model.Room"),
			Building: struct {
				field.RelationField
			}{
				RelationField: field.NewRelation("Professors.Room.Building", "model.Building"),
			},
		},
	}

	_labo.Students = laboManyToManyStudents{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Students", "model.Student"),
		Person: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Students.Person", "model.Person"),
		},
		Course: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Students.Course", "model.Course"),
		},
		Group: struct {
			field.RelationField
		}{
			RelationField: field.NewRelation("Students.Group", "model.Group"),
		},
	}

	_labo.Rooms = laboManyToManyRooms{
		db: db.Session(&gorm.Session{}),

		RelationField: field.NewRelation("Rooms", "model.Room"),
	}

	_labo.fillFieldMap()

	return _labo
}

type labo struct {
	laboDo

	ALL        field.Asterisk
	ID         field.Int32
	Name       field.String
	GroupID    field.Int32
	ProgramID  field.Int32
	BuildingID field.Int32
	CreatedAt  field.Time
	UpdatedAt  field.Time
	Group      laboBelongsToGroup

	Program laboBelongsToProgram

	Building laboBelongsToBuilding

	Professors laboManyToManyProfessors

	Students laboManyToManyStudents

	Rooms laboManyToManyRooms

	fieldMap map[string]field.Expr
}

func (l labo) Table(newTableName string) *labo {
	l.laboDo.UseTable(newTableName)
	return l.updateTableName(newTableName)
}

func (l labo) As(alias string) *labo {
	l.laboDo.DO = *(l.laboDo.As(alias).(*gen.DO))
	return l.updateTableName(alias)
}

func (l *labo) updateTableName(table string) *labo {
	l.ALL = field.NewAsterisk(table)
	l.ID = field.NewInt32(table, "id")
	l.Name = field.NewString(table, "name")
	l.GroupID = field.NewInt32(table, "group_id")
	l.ProgramID = field.NewInt32(table, "program_id")
	l.BuildingID = field.NewInt32(table, "building_id")
	l.CreatedAt = field.NewTime(table, "created_at")
	l.UpdatedAt = field.NewTime(table, "updated_at")

	l.fillFieldMap()

	return l
}

func (l *labo) GetFieldByName(fieldName string) (field.OrderExpr, bool) {
	_f, ok := l.fieldMap[fieldName]
	if !ok || _f == nil {
		return nil, false
	}
	_oe, ok := _f.(field.OrderExpr)
	return _oe, ok
}

func (l *labo) fillFieldMap() {
	l.fieldMap = make(map[string]field.Expr, 13)
	l.fieldMap["id"] = l.ID
	l.fieldMap["name"] = l.Name
	l.fieldMap["group_id"] = l.GroupID
	l.fieldMap["program_id"] = l.ProgramID
	l.fieldMap["building_id"] = l.BuildingID
	l.fieldMap["created_at"] = l.CreatedAt
	l.fieldMap["updated_at"] = l.UpdatedAt

}

func (l labo) clone(db *gorm.DB) labo {
	l.laboDo.ReplaceConnPool(db.Statement.ConnPool)
	return l
}

func (l labo) replaceDB(db *gorm.DB) labo {
	l.laboDo.ReplaceDB(db)
	return l
}

type laboBelongsToGroup struct {
	db *gorm.DB

	field.RelationField
}

func (a laboBelongsToGroup) Where(conds ...field.Expr) *laboBelongsToGroup {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a laboBelongsToGroup) WithContext(ctx context.Context) *laboBelongsToGroup {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a laboBelongsToGroup) Session(session *gorm.Session) *laboBelongsToGroup {
	a.db = a.db.Session(session)
	return &a
}

func (a laboBelongsToGroup) Model(m *model.Labo) *laboBelongsToGroupTx {
	return &laboBelongsToGroupTx{a.db.Model(m).Association(a.Name())}
}

type laboBelongsToGroupTx struct{ tx *gorm.Association }

func (a laboBelongsToGroupTx) Find() (result *model.Group, err error) {
	return result, a.tx.Find(&result)
}

func (a laboBelongsToGroupTx) Append(values ...*model.Group) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a laboBelongsToGroupTx) Replace(values ...*model.Group) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a laboBelongsToGroupTx) Delete(values ...*model.Group) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a laboBelongsToGroupTx) Clear() error {
	return a.tx.Clear()
}

func (a laboBelongsToGroupTx) Count() int64 {
	return a.tx.Count()
}

type laboBelongsToProgram struct {
	db *gorm.DB

	field.RelationField
}

func (a laboBelongsToProgram) Where(conds ...field.Expr) *laboBelongsToProgram {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a laboBelongsToProgram) WithContext(ctx context.Context) *laboBelongsToProgram {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a laboBelongsToProgram) Session(session *gorm.Session) *laboBelongsToProgram {
	a.db = a.db.Session(session)
	return &a
}

func (a laboBelongsToProgram) Model(m *model.Labo) *laboBelongsToProgramTx {
	return &laboBelongsToProgramTx{a.db.Model(m).Association(a.Name())}
}

type laboBelongsToProgramTx struct{ tx *gorm.Association }

func (a laboBelongsToProgramTx) Find() (result *model.Program, err error) {
	return result, a.tx.Find(&result)
}

func (a laboBelongsToProgramTx) Append(values ...*model.Program) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a laboBelongsToProgramTx) Replace(values ...*model.Program) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a laboBelongsToProgramTx) Delete(values ...*model.Program) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a laboBelongsToProgramTx) Clear() error {
	return a.tx.Clear()
}

func (a laboBelongsToProgramTx) Count() int64 {
	return a.tx.Count()
}

type laboBelongsToBuilding struct {
	db *gorm.DB

	field.RelationField

	Aliases struct {
		field.RelationField
	}
}

func (a laboBelongsToBuilding) Where(conds ...field.Expr) *laboBelongsToBuilding {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a laboBelongsToBuilding) WithContext(ctx context.Context) *laboBelongsToBuilding {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a laboBelongsToBuilding) Session(session *gorm.Session) *laboBelongsToBuilding {
	a.db = a.db.Session(session)
	return &a
}

func (a laboBelongsToBuilding) Model(m *model.Labo) *laboBelongsToBuildingTx {
	return &laboBelongsToBuildingTx{a.db.Model(m).Association(a.Name())}
}

type laboBelongsToBuildingTx struct{ tx *gorm.Association }

func (a laboBelongsToBuildingTx) Find() (result *model.Building, err error) {
	return result, a.tx.Find(&result)
}

func (a laboBelongsToBuildingTx) Append(values ...*model.Building) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a laboBelongsToBuildingTx) Replace(values ...*model.Building) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a laboBelongsToBuildingTx) Delete(values ...*model.Building) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a laboBelongsToBuildingTx) Clear() error {
	return a.tx.Clear()
}

func (a laboBelongsToBuildingTx) Count() int64 {
	return a.tx.Count()
}

type laboManyToManyProfessors struct {
	db *gorm.DB

	field.RelationField

	Person struct {
		field.RelationField
		Role struct {
			field.RelationField
		}
		Address struct {
			field.RelationField
		}
		Licenses struct {
			field.RelationField
			Person struct {
				field.RelationField
			}
		}
	}
	Room struct {
		field.RelationField
		Building struct {
			field.RelationField
		}
	}
}

func (a laboManyToManyProfessors) Where(conds ...field.Expr) *laboManyToManyProfessors {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a laboManyToManyProfessors) WithContext(ctx context.Context) *laboManyToManyProfessors {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a laboManyToManyProfessors) Session(session *gorm.Session) *laboManyToManyProfessors {
	a.db = a.db.Session(session)
	return &a
}

func (a laboManyToManyProfessors) Model(m *model.Labo) *laboManyToManyProfessorsTx {
	return &laboManyToManyProfessorsTx{a.db.Model(m).Association(a.Name())}
}

type laboManyToManyProfessorsTx struct{ tx *gorm.Association }

func (a laboManyToManyProfessorsTx) Find() (result []*model.Professor, err error) {
	return result, a.tx.Find(&result)
}

func (a laboManyToManyProfessorsTx) Append(values ...*model.Professor) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a laboManyToManyProfessorsTx) Replace(values ...*model.Professor) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a laboManyToManyProfessorsTx) Delete(values ...*model.Professor) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a laboManyToManyProfessorsTx) Clear() error {
	return a.tx.Clear()
}

func (a laboManyToManyProfessorsTx) Count() int64 {
	return a.tx.Count()
}

type laboManyToManyStudents struct {
	db *gorm.DB

	field.RelationField

	Person struct {
		field.RelationField
	}
	Course struct {
		field.RelationField
	}
	Group struct {
		field.RelationField
	}
}

func (a laboManyToManyStudents) Where(conds ...field.Expr) *laboManyToManyStudents {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a laboManyToManyStudents) WithContext(ctx context.Context) *laboManyToManyStudents {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a laboManyToManyStudents) Session(session *gorm.Session) *laboManyToManyStudents {
	a.db = a.db.Session(session)
	return &a
}

func (a laboManyToManyStudents) Model(m *model.Labo) *laboManyToManyStudentsTx {
	return &laboManyToManyStudentsTx{a.db.Model(m).Association(a.Name())}
}

type laboManyToManyStudentsTx struct{ tx *gorm.Association }

func (a laboManyToManyStudentsTx) Find() (result []*model.Student, err error) {
	return result, a.tx.Find(&result)
}

func (a laboManyToManyStudentsTx) Append(values ...*model.Student) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a laboManyToManyStudentsTx) Replace(values ...*model.Student) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a laboManyToManyStudentsTx) Delete(values ...*model.Student) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a laboManyToManyStudentsTx) Clear() error {
	return a.tx.Clear()
}

func (a laboManyToManyStudentsTx) Count() int64 {
	return a.tx.Count()
}

type laboManyToManyRooms struct {
	db *gorm.DB

	field.RelationField
}

func (a laboManyToManyRooms) Where(conds ...field.Expr) *laboManyToManyRooms {
	if len(conds) == 0 {
		return &a
	}

	exprs := make([]clause.Expression, 0, len(conds))
	for _, cond := range conds {
		exprs = append(exprs, cond.BeCond().(clause.Expression))
	}
	a.db = a.db.Clauses(clause.Where{Exprs: exprs})
	return &a
}

func (a laboManyToManyRooms) WithContext(ctx context.Context) *laboManyToManyRooms {
	a.db = a.db.WithContext(ctx)
	return &a
}

func (a laboManyToManyRooms) Session(session *gorm.Session) *laboManyToManyRooms {
	a.db = a.db.Session(session)
	return &a
}

func (a laboManyToManyRooms) Model(m *model.Labo) *laboManyToManyRoomsTx {
	return &laboManyToManyRoomsTx{a.db.Model(m).Association(a.Name())}
}

type laboManyToManyRoomsTx struct{ tx *gorm.Association }

func (a laboManyToManyRoomsTx) Find() (result []*model.Room, err error) {
	return result, a.tx.Find(&result)
}

func (a laboManyToManyRoomsTx) Append(values ...*model.Room) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Append(targetValues...)
}

func (a laboManyToManyRoomsTx) Replace(values ...*model.Room) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Replace(targetValues...)
}

func (a laboManyToManyRoomsTx) Delete(values ...*model.Room) (err error) {
	targetValues := make([]interface{}, len(values))
	for i, v := range values {
		targetValues[i] = v
	}
	return a.tx.Delete(targetValues...)
}

func (a laboManyToManyRoomsTx) Clear() error {
	return a.tx.Clear()
}

func (a laboManyToManyRoomsTx) Count() int64 {
	return a.tx.Count()
}

type laboDo struct{ gen.DO }

type ILaboDo interface {
	gen.SubQuery
	Debug() ILaboDo
	WithContext(ctx context.Context) ILaboDo
	WithResult(fc func(tx gen.Dao)) gen.ResultInfo
	ReplaceDB(db *gorm.DB)
	ReadDB() ILaboDo
	WriteDB() ILaboDo
	As(alias string) gen.Dao
	Session(config *gorm.Session) ILaboDo
	Columns(cols ...field.Expr) gen.Columns
	Clauses(conds ...clause.Expression) ILaboDo
	Not(conds ...gen.Condition) ILaboDo
	Or(conds ...gen.Condition) ILaboDo
	Select(conds ...field.Expr) ILaboDo
	Where(conds ...gen.Condition) ILaboDo
	Order(conds ...field.Expr) ILaboDo
	Distinct(cols ...field.Expr) ILaboDo
	Omit(cols ...field.Expr) ILaboDo
	Join(table schema.Tabler, on ...field.Expr) ILaboDo
	LeftJoin(table schema.Tabler, on ...field.Expr) ILaboDo
	RightJoin(table schema.Tabler, on ...field.Expr) ILaboDo
	Group(cols ...field.Expr) ILaboDo
	Having(conds ...gen.Condition) ILaboDo
	Limit(limit int) ILaboDo
	Offset(offset int) ILaboDo
	Count() (count int64, err error)
	Scopes(funcs ...func(gen.Dao) gen.Dao) ILaboDo
	Unscoped() ILaboDo
	Create(values ...*model.Labo) error
	CreateInBatches(values []*model.Labo, batchSize int) error
	Save(values ...*model.Labo) error
	First() (*model.Labo, error)
	Take() (*model.Labo, error)
	Last() (*model.Labo, error)
	Find() ([]*model.Labo, error)
	FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Labo, err error)
	FindInBatches(result *[]*model.Labo, batchSize int, fc func(tx gen.Dao, batch int) error) error
	Pluck(column field.Expr, dest interface{}) error
	Delete(...*model.Labo) (info gen.ResultInfo, err error)
	Update(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	Updates(value interface{}) (info gen.ResultInfo, err error)
	UpdateColumn(column field.Expr, value interface{}) (info gen.ResultInfo, err error)
	UpdateColumnSimple(columns ...field.AssignExpr) (info gen.ResultInfo, err error)
	UpdateColumns(value interface{}) (info gen.ResultInfo, err error)
	UpdateFrom(q gen.SubQuery) gen.Dao
	Attrs(attrs ...field.AssignExpr) ILaboDo
	Assign(attrs ...field.AssignExpr) ILaboDo
	Joins(fields ...field.RelationField) ILaboDo
	Preload(fields ...field.RelationField) ILaboDo
	FirstOrInit() (*model.Labo, error)
	FirstOrCreate() (*model.Labo, error)
	FindByPage(offset int, limit int) (result []*model.Labo, count int64, err error)
	ScanByPage(result interface{}, offset int, limit int) (count int64, err error)
	Scan(result interface{}) (err error)
	Returning(value interface{}, columns ...string) ILaboDo
	UnderlyingDB() *gorm.DB
	schema.Tabler
}

func (l laboDo) Debug() ILaboDo {
	return l.withDO(l.DO.Debug())
}

func (l laboDo) WithContext(ctx context.Context) ILaboDo {
	return l.withDO(l.DO.WithContext(ctx))
}

func (l laboDo) ReadDB() ILaboDo {
	return l.Clauses(dbresolver.Read)
}

func (l laboDo) WriteDB() ILaboDo {
	return l.Clauses(dbresolver.Write)
}

func (l laboDo) Session(config *gorm.Session) ILaboDo {
	return l.withDO(l.DO.Session(config))
}

func (l laboDo) Clauses(conds ...clause.Expression) ILaboDo {
	return l.withDO(l.DO.Clauses(conds...))
}

func (l laboDo) Returning(value interface{}, columns ...string) ILaboDo {
	return l.withDO(l.DO.Returning(value, columns...))
}

func (l laboDo) Not(conds ...gen.Condition) ILaboDo {
	return l.withDO(l.DO.Not(conds...))
}

func (l laboDo) Or(conds ...gen.Condition) ILaboDo {
	return l.withDO(l.DO.Or(conds...))
}

func (l laboDo) Select(conds ...field.Expr) ILaboDo {
	return l.withDO(l.DO.Select(conds...))
}

func (l laboDo) Where(conds ...gen.Condition) ILaboDo {
	return l.withDO(l.DO.Where(conds...))
}

func (l laboDo) Order(conds ...field.Expr) ILaboDo {
	return l.withDO(l.DO.Order(conds...))
}

func (l laboDo) Distinct(cols ...field.Expr) ILaboDo {
	return l.withDO(l.DO.Distinct(cols...))
}

func (l laboDo) Omit(cols ...field.Expr) ILaboDo {
	return l.withDO(l.DO.Omit(cols...))
}

func (l laboDo) Join(table schema.Tabler, on ...field.Expr) ILaboDo {
	return l.withDO(l.DO.Join(table, on...))
}

func (l laboDo) LeftJoin(table schema.Tabler, on ...field.Expr) ILaboDo {
	return l.withDO(l.DO.LeftJoin(table, on...))
}

func (l laboDo) RightJoin(table schema.Tabler, on ...field.Expr) ILaboDo {
	return l.withDO(l.DO.RightJoin(table, on...))
}

func (l laboDo) Group(cols ...field.Expr) ILaboDo {
	return l.withDO(l.DO.Group(cols...))
}

func (l laboDo) Having(conds ...gen.Condition) ILaboDo {
	return l.withDO(l.DO.Having(conds...))
}

func (l laboDo) Limit(limit int) ILaboDo {
	return l.withDO(l.DO.Limit(limit))
}

func (l laboDo) Offset(offset int) ILaboDo {
	return l.withDO(l.DO.Offset(offset))
}

func (l laboDo) Scopes(funcs ...func(gen.Dao) gen.Dao) ILaboDo {
	return l.withDO(l.DO.Scopes(funcs...))
}

func (l laboDo) Unscoped() ILaboDo {
	return l.withDO(l.DO.Unscoped())
}

func (l laboDo) Create(values ...*model.Labo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Create(values)
}

func (l laboDo) CreateInBatches(values []*model.Labo, batchSize int) error {
	return l.DO.CreateInBatches(values, batchSize)
}

// Save : !!! underlying implementation is different with GORM
// The method is equivalent to executing the statement: db.Clauses(clause.OnConflict{UpdateAll: true}).Create(values)
func (l laboDo) Save(values ...*model.Labo) error {
	if len(values) == 0 {
		return nil
	}
	return l.DO.Save(values)
}

func (l laboDo) First() (*model.Labo, error) {
	if result, err := l.DO.First(); err != nil {
		return nil, err
	} else {
		return result.(*model.Labo), nil
	}
}

func (l laboDo) Take() (*model.Labo, error) {
	if result, err := l.DO.Take(); err != nil {
		return nil, err
	} else {
		return result.(*model.Labo), nil
	}
}

func (l laboDo) Last() (*model.Labo, error) {
	if result, err := l.DO.Last(); err != nil {
		return nil, err
	} else {
		return result.(*model.Labo), nil
	}
}

func (l laboDo) Find() ([]*model.Labo, error) {
	result, err := l.DO.Find()
	return result.([]*model.Labo), err
}

func (l laboDo) FindInBatch(batchSize int, fc func(tx gen.Dao, batch int) error) (results []*model.Labo, err error) {
	buf := make([]*model.Labo, 0, batchSize)
	err = l.DO.FindInBatches(&buf, batchSize, func(tx gen.Dao, batch int) error {
		defer func() { results = append(results, buf...) }()
		return fc(tx, batch)
	})
	return results, err
}

func (l laboDo) FindInBatches(result *[]*model.Labo, batchSize int, fc func(tx gen.Dao, batch int) error) error {
	return l.DO.FindInBatches(result, batchSize, fc)
}

func (l laboDo) Attrs(attrs ...field.AssignExpr) ILaboDo {
	return l.withDO(l.DO.Attrs(attrs...))
}

func (l laboDo) Assign(attrs ...field.AssignExpr) ILaboDo {
	return l.withDO(l.DO.Assign(attrs...))
}

func (l laboDo) Joins(fields ...field.RelationField) ILaboDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Joins(_f))
	}
	return &l
}

func (l laboDo) Preload(fields ...field.RelationField) ILaboDo {
	for _, _f := range fields {
		l = *l.withDO(l.DO.Preload(_f))
	}
	return &l
}

func (l laboDo) FirstOrInit() (*model.Labo, error) {
	if result, err := l.DO.FirstOrInit(); err != nil {
		return nil, err
	} else {
		return result.(*model.Labo), nil
	}
}

func (l laboDo) FirstOrCreate() (*model.Labo, error) {
	if result, err := l.DO.FirstOrCreate(); err != nil {
		return nil, err
	} else {
		return result.(*model.Labo), nil
	}
}

func (l laboDo) FindByPage(offset int, limit int) (result []*model.Labo, count int64, err error) {
	result, err = l.Offset(offset).Limit(limit).Find()
	if err != nil {
		return
	}

	if size := len(result); 0 < limit && 0 < size && size < limit {
		count = int64(size + offset)
		return
	}

	count, err = l.Offset(-1).Limit(-1).Count()
	return
}

func (l laboDo) ScanByPage(result interface{}, offset int, limit int) (count int64, err error) {
	count, err = l.Count()
	if err != nil {
		return
	}

	err = l.Offset(offset).Limit(limit).Scan(result)
	return
}

func (l laboDo) Scan(result interface{}) (err error) {
	return l.DO.Scan(result)
}

func (l laboDo) Delete(models ...*model.Labo) (result gen.ResultInfo, err error) {
	return l.DO.Delete(models)
}

func (l *laboDo) withDO(do gen.Dao) *laboDo {
	l.DO = *do.(*gen.DO)
	return l
}
